=================
Developer's guide
=================

:Updated: bignose 2007-03-26

Project layout
==============

::

    ./                  Top level of source tree
        doc/            Project documentation
        src/            Program source code
            gracied     Main program daemon
            gracie/     Gracie library code
            test/       Unit tests

Code style
==========

Python
------

All Python code should conform to the guidelines in PEP8_. In
particular:

* Indent each level using 4 spaces, and no ASCII TABs.

* Name modules in lower case, ``multiplewordslikethis``.

* Name classes in title case, ``MultipleWordsLikeThis``.

* Name functions, instances and other variables in lower case,
  ``multiple_words_like_this``.

* Doc strings are written as triple-quoted strings.

  * The first line is a one-line summary of the object. This summary
    line appears on the same line as the opening triple-quote.
  
  * Further lines should be separated from the first by a blank line.

..  _PEP8: http://www.python.org/dev/peps/pep-0008/

Make
----

* Any "phony" targets are marked with a separate ``.PHONY: foo``
  pseudo-target appearing immediately before the ``foo:`` target line
  to indicate clearly the nature of that target. These will all be
  collated by ``make`` at run-time.

* Make files should have their first target named ``all``, which will
  become the default target when executing ``make``.
  
  * The ``all`` target must be marked ``.PHONY``.

  * The ``all`` target must depend on other, more specifically-named
    targets which are the main product of the directory.

* Use ``$()`` for substituting commands or program names for execution.

* Use ``${}`` for substituting all other variables.

Unit tests
==========

New code, or changes to existing code, will only be considered for inclusion
in the development tree when accompanied by corresponding additions or
changes to the unit tests.

Test-driven development
-----------------------

Where possible, practice test-driven development to implement program
code.

* During a development session, maintain a separate window or terminal
  with the unit test suite for the project running continuously, or
  automatically every few seconds.

* Any time a test is failing, the only valid change is to make all tests
  pass.

* Develop new features (changes to the program behaviour) only when
  all current tests pass.

* Refactor as needed, but only when all tests pass, and only for the
  purpose of reorganising the internal structure of the code, not to
  change program behaviour.

* Develop new or changed program behaviour by:

  * *First* write a single, specific test case for that new behaviour,
    then watch the test fail in the absence of the desired behaviour.

  * Implement the minimum necessary change to satisfy the failing test.
    Continue until all tests pass again, then stop adding code.

  * Once the new test (and all existing tests) pass, consider
    refactoring the code and the tests immediately, then ensure all
    the tests pass again.

